services:
  profile-ms:
    container_name: profile-ms
    build: 
      context: ./profile-microservice
      dockerfile: Dockerfile-dev
    volumes:
      - ./profile-microservice:/usr/src/app
    environment:
      - S3_ACCESS_KEY=secret
      - S3_SECRET_KEY=secret
      - PROFILE_DB_USER=${PROFILE_DB_USER}
      - PROFILE_DB_PASSWORD=${PROFILE_DB_PASSWORD}
      - PROFILE_DB_HOST=${PROFILE_DB_HOST}
  reviews-ms:
    container_name: reviews-ms
    build: 
      context: ./reviews-microservice
      dockerfile: Dockerfile-dev
    volumes:
      - ./reviews-microservice:/usr/src/app
    environment:
      - PROFILE_DB_USER=${PROFILE_DB_USER}
      - PROFILE_DB_PASSWORD=${PROFILE_DB_PASSWORD}
      - PROFILE_DB_HOST=${PROFILE_DB_HOST}
  music-ms:
    container_name: music-ms
    build:
      context: ./music-ms
      dockerfile: Dockerfile
    restart: unless-stopped
    # Puerto comentado para que solo sea accesible a través del API Gateway
    # ports:
    #   - "3002:3002"
    environment:
      # - PORT=3002
      - MONGODB_URI=${MONGODB_URI}
      - MONGODB_NAME=${MONGODB_NAME}
      - MONGODB_TIMEOUT=10
      - SPOTIFY_CLIENT_ID=secret
      - SPOTIFY_CLIENT_SECRET=secret
    # depends_on:
    #   - mongo
  streaming-ms:
    container_name: streaming-ms
    build:
      context: ./streaming-ms
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8081:8080"  # Exponer WebSocket para conexión directa desde el frontend
    environment:
      - PORT=8080
      - API_GATEWAY_URL=http://apigateway:8080
      - S3_ACCESS_KEY=${MUSIC_S3_ACCESS_KEY}
      - S3_SECRET_KEY=${MUSIC_S3_SECRET_KEY}
      - S3_BUCKET_NAME=${MUSIC_S3_BUCKET_NAME}
      - AWS_REGION=${MUSIC_AWS_REGION}
    depends_on:
      - apigateway
      - music-ms
  # mongo:
  #   container_name: music-db
  #   image: mongo:6
  #   restart: unless-stopped
  #   ports:
  #     - "27018:27017"  # Exponer en un puerto distinto para evitar conflictos
  #   volumes:
  #     - mongo-data:/data/db
  #   command: mongod --quiet --logpath /dev/null  # Reducir logs
  aleph-frontend:
    container_name: aleph-frontend
    build: 
      context: ./aleph-frontend
      dockerfile: Dockerfile.dev
    environment:
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
    ports:
      - "3000:3000"
    depends_on:
      - music-ms
      - streaming-ms
  apigateway:
    container_name: apigateway
    build: 
      context: ./ApiGateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
  auth-ms:
    container_name: auth-ms
    build:
      context: ./auth-ms
      dockerfile: Dockerfile
    volumes:
      - ./auth-ms:/app
      - /app/node_modules
    environment:
      - PORT=${PORT}
      - JWT_SECRET=${JWT_SECRET}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASS=${EMAIL_PASS}
      - EMAIL_FROM=${EMAIL_FROM}
      - FRONTEND_URL=${FRONTEND_URL}
      - MONGO_URI=${AUTH_MONGO_URI}
    ports:
      - "4000:4000"
      
volumes:
  profile_data:
  reviews_data:
  mongo-data: