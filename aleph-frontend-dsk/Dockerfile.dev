FROM node:20-bullseye-slim

# Evitar prompts interactivos durante la instalación
ENV DEBIAN_FRONTEND=noninteractive

# Instalar dependencias necesarias para compilar Electron para múltiples plataformas
RUN apt-get update && apt-get install -y \
    python3 make g++ git \
    # Dependencias para compilar
    libx11-dev libxkbfile-dev libxtst-dev \
    libpng-dev libxcursor-dev libxrandr-dev \
    libxi-dev mesa-utils libnss3 \
    # GTK y accesibilidad para electron-builder
    libgtk-3-0 libgtk-3-dev libnotify-dev \
    libgbm-dev libxss1 libasound2 \
    libatspi2.0-0 libsecret-1-0 \
    # Herramientas para AppImage
    fuse libfuse2 \
    # Limpiar cache de apt
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Establecer directorio de trabajo
WORKDIR /app

# Variables de entorno para Electron
ENV ELECTRON_NO_SANDBOX=true
ENV ELECTRON_ENABLE_SANDBOX=false
ENV ELECTRON_DISABLE_SANDBOX=1

# Crear un directorio para los builds
RUN mkdir -p /builds

# Copia de archivos de dependencias
COPY package*.json ./

# Instalación de dependencias
RUN npm install

# Ejecutar el script postinstall para electron-builder
RUN npm run postinstall

# Copia del código fuente
COPY . .

# Crear script de build multiplataforma
RUN echo '#!/bin/bash\n\
# Script para generar builds según el sistema operativo especificado\n\
TARGET_OS=${1:-all}\n\
\n\
echo "==== Generando build para: $TARGET_OS ===="\n\
\n\
case "$TARGET_OS" in\n\
  linux)\n\
    echo "Generando build para Linux..."\n\
    npm run build:linux\n\
    ;;\n\
  win|windows)\n\
    echo "Generando build para Windows..."\n\
    npm run build:win\n\
    ;;\n\
  mac|macos)\n\
    echo "Generando build para macOS..."\n\
    npm run build:mac\n\
    ;;\n\
  all)\n\
    echo "Generando builds para todas las plataformas..."\n\
    npm run build\n\
    ;;\n\
  dev)\n\
    echo "Iniciando servidor de desarrollo..."\n\
    npm run dev:renderer\n\
    ;;\n\
  *)\n\
    echo "Sistema operativo no reconocido: $TARGET_OS"\n\
    echo "Opciones válidas: linux, windows (win), macos (mac), all, dev"\n\
    exit 1\n\
    ;;\n\
esac\n\
\n\
# Copiar los archivos generados a la carpeta compartida\n\
if [ "$TARGET_OS" != "dev" ]; then\n\
  echo "Copiando archivos compilados a /builds..."\n\
  cp -r dist/* /builds/\n\
  echo "Compilación completa. Archivos disponibles en ./builds"\n\
fi\n\
' > /app/build.sh && chmod +x /app/build.sh

# Exponer puertos para desarrollo web
EXPOSE 3001
EXPOSE 9000

# Comando por defecto
ENTRYPOINT ["/app/build.sh"]
CMD ["all"]